# Included scalars
scalar JSON
scalar Upload

type Entity {
  id: ID!
  name: String!
  type: String!
  aspects: [Aspect]
  archived: Boolean
}

input EntityInput {
  name: String
  type: String
  archived: Boolean
}

type Aspect {
  id: ID!
  name: String!
  type: String!
  freeInvokes: Int!
  usedInvokes: Int!
}

# ===========
# EXAMPLES
# ===========

# It will increment!
type Counter {
  # Number of increments
  count: Int!
  # Full message for testing
  countStr: String
}

# A text message send by users
type Message {
  id: ID!
  # Message content
  text: String!
}

# Input from user to create a message
input MessageInput {
  # Message content
  text: String!
}

type File {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}


type Query {
  # Test query with a parameter
  hello(name: String): String!
  # List of messages sent by users
  messages: [Message]
  entities(input: EntityInput): [Entity]
  uploads: [File]

}

type Mutation {
  myMutation: String!
  # Add a message and publish it on 'messages' subscription channel
  createEntity (input: EntityInput!): Entity!
  updateEntity (id: ID!, input: EntityInput!): Entity!

  addMessage (input: MessageInput!): Message!
  singleUpload (file: Upload!): File!
  multipleUpload (files: [Upload!]!): [File!]!
}

type Subscription {
  mySub: String!

  entityCreated: Entity!
  entityUpdated: Entity!
  entityCreatedOrUpdated: Entity!

  # This will update every 2 seconds
  counter: Counter!
  # When a new message is added
  messageAdded: Message!
}
